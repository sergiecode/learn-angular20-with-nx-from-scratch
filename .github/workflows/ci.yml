# Configuración de Integración Continua (CI) para el proyecto
name: CI

# Define cuándo se ejecuta el workflow
on:
  push:
    branches:
      - master           # Se ejecuta cuando hay push a la rama master
      - tutorial/**      # Se ejecuta cuando hay push a cualquier rama que empiece con "tutorial/"
  pull_request:          # Se ejecuta en todos los pull requests

# Permisos mínimos requeridos para el workflow
permissions:
  actions: read          # Permiso para leer acciones de GitHub
  contents: read         # Permiso para leer el contenido del repositorio

jobs:
  main:
    runs-on: ubuntu-latest  # Ejecuta el job en un runner de Ubuntu
    steps:
      # Paso 1: Descarga el código del repositorio
      - uses: actions/checkout@v4
        with:
          filter: tree:0     # Descarga todos los archivos (incluye archivos grandes)
          fetch-depth: 0     # Descarga todo el historial de git (necesario para Nx)

      
      # Paso 2: Distribución de tareas con Nx Cloud (OPCIONAL - comentado)
      # Esto permite distribuir las tareas entre múltiples agentes para acelerar el CI
      # Descomenta la siguiente línea para habilitar la distribución de tareas
      # - run: npx nx start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      
      # Paso 3: Configuración de Node.js con caché
      - uses: actions/setup-node@v4
        with:
          node-version: 20   # Usa Node.js versión 20
          cache: 'npm'       # Habilita caché de npm para acelerar instalaciones
       
      # Paso 4: Instalación de dependencias
      - run: npm ci --legacy-peer-deps  # Instala dependencias de producción (más rápido que npm install)


      # Paso 5: Ejecución de tareas de Nx (lint, test, build)
      # Opcional: Puedes grabar logs en Nx Cloud anteponiendo "npx nx-cloud record --"
      # - run: npx nx-cloud record -- echo Hello World
      - run: npx nx run-many -t lint test build  # Ejecuta linting, tests y build en todos los proyectos afectados
      
      # Paso 6: Auto-reparación de CI con Nx Cloud
      - run: npx nx fix-ci    # Intenta reparar automáticamente problemas comunes de CI
        if: always()          # Se ejecuta siempre, incluso si pasos anteriores fallan

# ═══════════════════════════════════════════════════════════════════════════════
# OTRAS ACCIONES POPULARES QUE SE SUELEN AGREGAR EN GITHUB ACTIONS:
# ═══════════════════════════════════════════════════════════════════════════════

# 🚀 DESPLIEGUE A AWS
# Despliega automáticamente la aplicación a Amazon Web Services
# - run: aws s3 sync ./dist s3://mi-bucket --delete

# ☁️ DESPLIEGUE A GOOGLE CLOUD PLATFORM
# Sube la aplicación a Google Cloud Platform
# - run: gcloud app deploy

# 🐳 DOCKER
# Construye y sube imagen Docker al registry
# - run: docker build -t mi-app . && docker push mi-app

# 📦 PUBLICAR PAQUETE NPM
# Publica librerías a npm registry automáticamente
# - run: npm publish

# 🔒 ANÁLISIS DE SEGURIDAD
# Escanea vulnerabilidades en dependencias y código
# - run: npm audit --audit-level=high

# 📊 REPORTES DE COBERTURA
# Sube reportes de cobertura de tests a servicios como Codecov
# - uses: codecov/codecov-action@v3

# 💬 NOTIFICACIONES
# Envía notificaciones a Slack, Discord, email cuando falla/pasa el CI
# - uses: 8398a7/action-slack@v3

# 🌐 DESPLIEGUE A VERCEL/NETLIFY
# Despliega automáticamente a plataformas de hosting
# - uses: amondnet/vercel-action@v25

# 🏷️ RELEASE AUTOMÁTICO
# Crea releases y tags automáticamente basado en commits
# - uses: semantic-release/semantic-release

# 🧪 TESTS E2E
# Ejecuta tests de extremo a extremo con herramientas como Cypress
# - run: npx cypress run

# 📱 TESTS EN MÚLTIPLES NAVEGADORES
# Ejecuta tests en diferentes navegadores y sistemas operativos
# - uses: browser-actions/setup-chrome@latest

# 🔄 CACHE AVANZADO
# Mejora velocidad guardando node_modules y builds anteriores
# - uses: actions/cache@v3